package Git;

import Terminal.FileIOMgr;

import java.util.ArrayList;
import static Terminal.Color.*;
import static Terminal.FileIOMgr.*;

public class Git  extends Repository{
    public ArrayList<Repository> repos = new ArrayList<>(); // Ïó¨Í∏∞ÏÑú ÏÉùÏÑ±ÌïòÍ≥†, ÏÇ¨Ïö©
    public int curRepoIndex; // ÌòÑÏû¨ Î™áÎ≤àÏ®∞ repos[] Ïùò Ïù∏Îç±Ïä§Ïù∏ÏßÄ

    @Override
    public String toString() {
        return "Current Repository >> origin "  + ANSI_BLUE
                + repos.get(curRepoIndex).getRepoName() + " " + ANSI_RESET + "(fetch)";
    }

    public Git() {
        curRepoIndex = -1;
    }

    public void setNewRepo(String repoName) {
        Repository newRepo = new Repository(repoName); // repoNameÏùÑ Í∞ÄÏßÑ ÏÉàÎ°úÏö¥ Î†àÌè¨ ÏÉùÏÑ±
        repos.add(newRepo);
    }

    public void init(String newRepoName){
        curRepoIndex++;
        setNewRepo(newRepoName); // Ìï¥Îãπ Ïù¥Î¶ÑÏúºÎ°ú Î†àÌè¨ Ï∂îÍ∞ÄÌï®
    }

    // zsh ÏóêÏÑú ls
    public String getRepos() {
        StringBuffer result = new StringBuffer();
        for(Repository repo: repos){
            result.append(repo.getRepoName()+"\t");
        }
        return result.toString();
    }

    // ÌòÑÏû¨ Î†àÌè¨Ïù¥Î¶ÑÍ≥º Í∞ôÏùÄÏï† Ï∞æÏïÑÏÑú currentRepoIndex Î∞îÍøîÏ£ºÍ∏∞
    // return : ÌòÑÏû¨ Î™áÎ≤àÏß∏Î°ú Ìï†ÏßÄ Î¶¨ÌÑ¥ÌïòÍ∏∞
    public boolean checkoutRepo(String repoName) {
        int i =0;
        boolean isExist = false; // true : ÏÑ±Í≥µ! false : Ïã§Ìå®
        for (Repository repo : repos) {
            if (repo.getRepoName().equals(repoName)) {
                // ÌòÑÏû¨ init Ìïú Ïï†Îäî ÏñòÎã§
                curRepoIndex = i;
                isExist = true;
                break;
            }
            i++;
        }
        if(isExist)
            System.out.println("‚ú®Current Repository : "+ANSI_CYAN + repos.get(curRepoIndex).getRepoName()+ANSI_RESET);
        else
            System.out.println(ANSI_RED+"The repository does not exist."+ANSI_RESET);

        return isExist;
    }

    // git branch ${branchName}
    public void newBranch(String branchName){
        repos.get(curRepoIndex).setBranch(branchName);
    }

    // git checkout ${branchName}
    public void checkout(String branchName){
        repos.get(curRepoIndex).checkoutBranch(branchName);
    }

    // git branch
    public void getBranchList(){
        repos.get(curRepoIndex).getBranches();
    }

    // git log
    public void getLog() {
        Branch branch = repos.get(curRepoIndex).getBranch();
        System.out.println(branch.getCommitLog());
    }

    // git remote
    public void gitRemote(){
        System.out.println(this.toString());
    }

    // git push
    public void gitPush() {
        Branch branch = repos.get(curRepoIndex).getBranch();
        String contents = branch.getCommitLog();
        // Ìè¥Îçî : Î†àÌè¨ Ïù¥Î¶Ñ, ÌååÏùº : Î†àÌè¨_branch Ïù¥Î¶Ñ
        makeFile(repos.get(curRepoIndex).getRepoName(), repos.get(curRepoIndex).getBranchName(), contents);
        branch.setPush();
    }

    // git commit "msg"
    public void commit(String commitMsg) {
        Branch branch = repos.get(curRepoIndex).getBranch();
        branch.setCommitLog(commitMsg);
    }

    // new fileName
    public void setNewFile(String name) {
        Branch branch = repos.get(curRepoIndex).getBranch();
        branch.newFile(name);
    }

    // touch fileName
    public void setTouchFile(String name){
        Branch branch = repos.get(curRepoIndex).getBranch();
        branch.editFileStatus(name);
    }

    // git status
    public void getBranchStatus(){
        Branch branch = repos.get(curRepoIndex).getBranch();
        branch.getStatus();
    }

    // git add fileName, git add .
    public void gitAdd(String name){
        Branch branch = repos.get(curRepoIndex).getBranch();
        if(name.equals(".")){
            branch.setAddAll();
        }else{
            branch.setAdd(name);
        }

    }

    // prompt ÏÖãÌåÖ
    public String setGitPrompt(String prompt) {
        return repos.get(curRepoIndex).getRepoName() + "/" + repos.get(curRepoIndex).getBranchName() + "> ";
    }


    // git help
    public void gitHelp() {
        FileIOMgr.readFile();
        // ÌååÏùºÏùΩÍ∏∞?
//        System.out.print("‚úã\uD83C\uDFFB Hi! This is Virtual git Program ‚úã\uD83C\uDFFB\n" +
//                "Author : SoYun Bang, School Of Global Media, in Soongsil Univ.\n" +
//                "AuthorID : 20162574\n" +
//                "Contact : thdbstjdud@gmail.com\n" +
//                "Project Name : OOP Term Project\n" +
//                "Project Subject : Virtual Git Program\n" +
//                "\n" +
//                "‚ú®<- gitmoji :sparkles: - Additional Log. Ïã§Ï†úÎ°úÎäî Ìï¥Îãπ LineÏù¥ Îì±Ïû•ÌïòÏßÄ ÏïäÏßÄÎßå, Î∞òÏùëÏùÑ Ï¶âÍ∞Å Î≥¥Ïù¥Í∏∞ ÏúÑÌïú event Log.\n" +
//                "\n" +
//                "These are common Git commands used in various situations:\n" +
//                "\n" +
//                "start a working area\n" +
//                "[ONLY in Terminal]\n" +
//                "pwd          terminal running...\n" +
//                "exit          program Ï¢ÖÎ£å\n" +
//                "cd ${repoName}              ${repoName}Ïóê Ìï¥ÎãπÌïòÎäî repositoryÎ°ú Ï†ëÍ∑ºÌïòÎ©∞, git ÏûëÏóÖÏùÑ Ìï† Ïàò ÏûàÏùå\n" +
//                "\n" +
//                "[ONLY in Git]\n" +
//                "pwd          git running...\n" +
//                "cd          Ìï¥Îãπ repositoryÏóêÏÑú Îπ†Ï†∏ÎÇòÏôÄ git ÏûëÏóÖÏùÑ Ìï†Ïàò ÏóÜÏùå\n" +
//                "touch ${fileName}           ${fileName}ÌååÏùºÏùÑ ÏàòÏ†ïÌïúÎã§Îäî ÏùòÎØ∏\n" +
//                "new ${fileName}           ${fileName}ÌååÏùºÏùÑ ÏÉùÏÑ±. Ïù¥ÎØ∏ Ï°¥Ïû¨ÌïúÎã§Î©¥ ÏÉùÏÑ±ÌïòÏßÄÏïäÏùåÏùÑ ÏïåÎ¶¨Í≥† Ïû¨ÏûÖÎ†• Î∞õÏùå\n" +
//                "git checkout ${branchName}           ${branchName}Ïùò Î∏åÎûúÏπòÎ°ú checkoutÌï®. ÏóÜÎã§Î©¥ Ïû¨ÏûÖÎ†• Î∞õÏùå\n" +
//                "git branch          ÌòÑÏû¨ repositoryÍ∞Ä Î≥¥Ïú†ÌïòÍ≥†ÏûàÎäî branchÏùò Î™©Î°ùÏùÑ Î¶¨Ïä§Ìä∏ÏóÖ. ÌòÑÏû¨ Ï≤¥ÌÅ¨ÏïÑÏõÉÌïú Î∏åÎûúÏπò ÏïûÏóêÎäî * Í∞Ä Î∂ôÏùå\n" +
//                "git add ${fileName}          ÏïÑÏßÅ StagingÎêòÏßÄ ÏïäÏùÄ ÏÉÅÌÉúÏùò ${fileName}ÏùÑ StagingÌï®\n" +
//                "git add .          ÏïÑÏßÅ Staging ÎêòÏßÄ ÏïäÏùÄ ÏÉÅÌÉúÏùò Î™®Îì† ÌååÏùºÎì§ÏùÑ StagingÌï®\n" +
//                "git commit ${commitMSG}          ${commitMSG}Ïùò ÎÇ¥Ïö©ÏúºÎ°ú ÌòÑÏû¨ Tracked Ï§ëÏù∏(StagingÎêú ÏÉÅÌÉúÏùò) ÌååÏùºÎì§ÏùÑ CommitÌï®\n" +
//                "git push           ÌòÑÏû¨ÍπåÏßÄÏùò Ïª§Î∞ãÎ°úÍ∑∏Î•º ${repoName}Ïùò Ìè¥Îçî ÏïàÏóê remote_${branchName}.txt ÌååÏùºÏóê ÏûëÏÑ±ÌïòÏó¨ Ï†ÄÏû•. ÌòÑÏû¨ Ï≤¥ÌÅ¨ÏïÑÏõÉÌïú Î∏åÎûúÏπòÏùò Í≤ÉÏùÑ Ìë∏Ïâ¨Ìï®\n" +
//                "git status           ÌòÑÏû¨ ÌååÏùºÎì§Ïùò ÏÉÅÌÉúÎ•º Î≥¥Ïó¨Ï§å. \n" +
//                "git log           Ìï¥Îãπ branchÏùò ÌòÑÏû¨ÍπåÏßÄÏùò Ïª§Î∞ãÎ°úÍ∑∏Î•º Î≥¥Ïó¨Ï§å. commitIDÎäî randomÏúºÎ°ú ÏûÑÏùòÎ°ú Î∞õÏùå \n" +
//                " \n" +
//                " \n" +
//                "[About File]\n" +
//                "StagingNotChanged           Ïù¥Ï†Ñ Push Ïù¥ÌõÑÎ°ú Î≥ÄÌôîÍ∞Ä ÏÉùÍ∏¥ ÌååÏùº. NOTCHANGED, MODIFIED ÏÉÅÌÉúÍ∞Ä Ìï¥ÎãπÎê† Í≤ÉÏù¥Î©∞ NOTCHANGEDÎäî Ïã§Ï†ú ÍπÉÏóêÏÑúÏ≤òÎüº Î≥¥Ïù¥ÏßÄ ÏïäÍ≤å ÏÑ§Ï†ïÌïòÏòÄÏùå(Ìë∏Ïâ¨ Ïù¥ÌõÑÏóê Î≥ÄÌôîÌïú ÌååÏùºÎßå ÌëúÏãú)  \n" +
//                "OnlyStaging           Ïù¥Ï†Ñ Commit Ïù¥ÌõÑÎ°ú Î≥ÄÌôîÍ∞Ä ÏÉùÍ∏¥ ÌååÏùº. NEWFILE, MODIFIED ÏÉÅÌÉúÍ∞Ä Ìï¥ÎãπÎê®  \n" +
//                "Untracked           ÏÉàÎ°≠Í≤å new ÏÉùÏÑ±Îêú ÌååÏùº. NEWFILE ÏÉÅÌÉúÎßå Ìï¥ÎãπÌïòÎØÄÎ°ú, ÌååÏùºÏùò StatusÎ•º Î≥¥Ïó¨Ï£ºÏßÄ ÏïäÏùå\n" +
//                "\n" +
//                "[About Status]\n" +
//                "NOTCHANGED           Ïù¥Ï†ÑÏóê commit Ìïú ÌûàÏä§ÌÜ†Î¶¨ O, Ïù¥Ï†Ñ Ïª§Î∞ã Ïù¥ÌõÑÎ°ú Î≥ÄÍ≤Ω X\n" +
//                "MODIFIED           Ïù¥Ï†ÑÏóê commit Ìïú ÌûàÏä§ÌÜ†Î¶¨ O, Ïù¥Ï†Ñ Ïª§Î∞ã Ïù¥ÌõÑÎ°ú Î≥ÄÍ≤Ω O\n" +
//                "NEWFILE           Ïù¥Ï†ÑÏóê commit Ìïú ÌûàÏä§ÌÜ†Î¶¨ X, ÏÉàÎ°ú add Îêú ÌååÏùº \n" +
//                "\n" +
//                "\n" +
//                "ü•∞ Virtual Git ");
    }
}
